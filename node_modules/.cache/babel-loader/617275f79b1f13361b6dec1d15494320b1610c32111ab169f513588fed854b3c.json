{"ast":null,"code":"/*! @azure/msal-browser v3.6.0 2023-12-01 */\n'use strict';\n\nimport { PerformanceEvents, invokeAsync, Constants, UrlString, AuthorizationCodeClient, Authority, AuthorityFactory, ProtocolUtils } from '@azure/msal-common';\nimport { BaseInteractionClient } from './BaseInteractionClient.mjs';\nimport { BrowserConstants } from '../utils/BrowserConstants.mjs';\nimport { version } from '../packageMetadata.mjs';\nimport { getCurrentUri } from '../utils/BrowserUtils.mjs';\nimport { generatePkceCodes } from '../crypto/PkceGenerator.mjs';\nimport { createNewGuid } from '../crypto/BrowserCrypto.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Defines the class structure and helper functions used by the \"standard\", non-brokered auth flows (popup, redirect, silent (RT), silent (iframe))\n */\nclass StandardInteractionClient extends BaseInteractionClient {\n  /**\n   * Generates an auth code request tied to the url request.\n   * @param request\n   */\n  async initializeAuthorizationCodeRequest(request) {\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, this.correlationId);\n    const generatedPkceParams = await invokeAsync(generatePkceCodes, PerformanceEvents.GeneratePkceCodes, this.logger, this.performanceClient, this.correlationId)(this.performanceClient, this.logger, this.correlationId);\n    const authCodeRequest = {\n      ...request,\n      redirectUri: request.redirectUri,\n      code: Constants.EMPTY_STRING,\n      codeVerifier: generatedPkceParams.verifier\n    };\n    request.codeChallenge = generatedPkceParams.challenge;\n    request.codeChallengeMethod = Constants.S256_CODE_CHALLENGE_METHOD;\n    return authCodeRequest;\n  }\n  /**\n   * Initializer for the logout request.\n   * @param logoutRequest\n   */\n  initializeLogoutRequest(logoutRequest) {\n    this.logger.verbose(\"initializeLogoutRequest called\", logoutRequest?.correlationId);\n    const validLogoutRequest = {\n      correlationId: this.correlationId || createNewGuid(),\n      ...logoutRequest\n    };\n    /**\n     * Set logout_hint to be login_hint from ID Token Claims if present\n     * and logoutHint attribute wasn't manually set in logout request\n     */\n    if (logoutRequest) {\n      // If logoutHint isn't set and an account was passed in, try to extract logoutHint from ID Token Claims\n      if (!logoutRequest.logoutHint) {\n        if (logoutRequest.account) {\n          const logoutHint = this.getLogoutHintFromIdTokenClaims(logoutRequest.account);\n          if (logoutHint) {\n            this.logger.verbose(\"Setting logoutHint to login_hint ID Token Claim value for the account provided\");\n            validLogoutRequest.logoutHint = logoutHint;\n          }\n        } else {\n          this.logger.verbose(\"logoutHint was not set and account was not passed into logout request, logoutHint will not be set\");\n        }\n      } else {\n        this.logger.verbose(\"logoutHint has already been set in logoutRequest\");\n      }\n    } else {\n      this.logger.verbose(\"logoutHint will not be set since no logout request was configured\");\n    }\n    /*\n     * Only set redirect uri if logout request isn't provided or the set uri isn't null.\n     * Otherwise, use passed uri, config, or current page.\n     */\n    if (!logoutRequest || logoutRequest.postLogoutRedirectUri !== null) {\n      if (logoutRequest && logoutRequest.postLogoutRedirectUri) {\n        this.logger.verbose(\"Setting postLogoutRedirectUri to uri set on logout request\", validLogoutRequest.correlationId);\n        validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(logoutRequest.postLogoutRedirectUri, getCurrentUri());\n      } else if (this.config.auth.postLogoutRedirectUri === null) {\n        this.logger.verbose(\"postLogoutRedirectUri configured as null and no uri set on request, not passing post logout redirect\", validLogoutRequest.correlationId);\n      } else if (this.config.auth.postLogoutRedirectUri) {\n        this.logger.verbose(\"Setting postLogoutRedirectUri to configured uri\", validLogoutRequest.correlationId);\n        validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(this.config.auth.postLogoutRedirectUri, getCurrentUri());\n      } else {\n        this.logger.verbose(\"Setting postLogoutRedirectUri to current page\", validLogoutRequest.correlationId);\n        validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(getCurrentUri(), getCurrentUri());\n      }\n    } else {\n      this.logger.verbose(\"postLogoutRedirectUri passed as null, not setting post logout redirect uri\", validLogoutRequest.correlationId);\n    }\n    return validLogoutRequest;\n  }\n  /**\n   * Parses login_hint ID Token Claim out of AccountInfo object to be used as\n   * logout_hint in end session request.\n   * @param account\n   */\n  getLogoutHintFromIdTokenClaims(account) {\n    const idTokenClaims = account.idTokenClaims;\n    if (idTokenClaims) {\n      if (idTokenClaims.login_hint) {\n        return idTokenClaims.login_hint;\n      } else {\n        this.logger.verbose(\"The ID Token Claims tied to the provided account do not contain a login_hint claim, logoutHint will not be added to logout request\");\n      }\n    } else {\n      this.logger.verbose(\"The provided account does not contain ID Token Claims, logoutHint will not be added to logout request\");\n    }\n    return null;\n  }\n  /**\n   * Creates an Authorization Code Client with the given authority, or the default authority.\n   * @param serverTelemetryManager\n   * @param authorityUrl\n   */\n  async createAuthCodeClient(serverTelemetryManager, authorityUrl, requestAzureCloudOptions) {\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, this.correlationId);\n    // Create auth module.\n    const clientConfig = await invokeAsync(this.getClientConfiguration.bind(this), PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.logger, this.performanceClient, this.correlationId)(serverTelemetryManager, authorityUrl, requestAzureCloudOptions);\n    return new AuthorizationCodeClient(clientConfig, this.performanceClient);\n  }\n  /**\n   * Creates a Client Configuration object with the given request authority, or the default authority.\n   * @param serverTelemetryManager\n   * @param requestAuthority\n   * @param requestCorrelationId\n   */\n  async getClientConfiguration(serverTelemetryManager, requestAuthority, requestAzureCloudOptions) {\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\n    const discoveredAuthority = await invokeAsync(this.getDiscoveredAuthority.bind(this), PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.logger, this.performanceClient, this.correlationId)(requestAuthority, requestAzureCloudOptions);\n    const logger = this.config.system.loggerOptions;\n    return {\n      authOptions: {\n        clientId: this.config.auth.clientId,\n        authority: discoveredAuthority,\n        clientCapabilities: this.config.auth.clientCapabilities\n      },\n      systemOptions: {\n        tokenRenewalOffsetSeconds: this.config.system.tokenRenewalOffsetSeconds,\n        preventCorsPreflight: true\n      },\n      loggerOptions: {\n        loggerCallback: logger.loggerCallback,\n        piiLoggingEnabled: logger.piiLoggingEnabled,\n        logLevel: logger.logLevel,\n        correlationId: this.correlationId\n      },\n      cacheOptions: {\n        claimsBasedCachingEnabled: this.config.cache.claimsBasedCachingEnabled\n      },\n      cryptoInterface: this.browserCrypto,\n      networkInterface: this.networkClient,\n      storageInterface: this.browserStorage,\n      serverTelemetryManager: serverTelemetryManager,\n      libraryInfo: {\n        sku: BrowserConstants.MSAL_SKU,\n        version: version,\n        cpu: Constants.EMPTY_STRING,\n        os: Constants.EMPTY_STRING\n      },\n      telemetry: this.config.telemetry\n    };\n  }\n  /**\n   * Used to get a discovered version of the default authority.\n   * @param requestAuthority\n   * @param requestCorrelationId\n   */\n  async getDiscoveredAuthority(requestAuthority, requestAzureCloudOptions) {\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.correlationId);\n    const authorityOptions = {\n      protocolMode: this.config.auth.protocolMode,\n      OIDCOptions: this.config.auth.OIDCOptions,\n      knownAuthorities: this.config.auth.knownAuthorities,\n      cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n      authorityMetadata: this.config.auth.authorityMetadata,\n      skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache\n    };\n    // build authority string based on auth params, precedence - azureCloudInstance + tenant >> authority\n    const userAuthority = requestAuthority ? requestAuthority : this.config.auth.authority;\n    // fall back to the authority from config\n    const builtAuthority = Authority.generateAuthority(userAuthority, requestAzureCloudOptions || this.config.auth.azureCloudOptions);\n    return invokeAsync(AuthorityFactory.createDiscoveredInstance.bind(AuthorityFactory), PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, this.logger, this.performanceClient, this.correlationId)(builtAuthority, this.config.system.networkClient, this.browserStorage, authorityOptions, this.logger, this.performanceClient, this.correlationId);\n  }\n  /**\n   * Helper to initialize required request parameters for interactive APIs and ssoSilent()\n   * @param request\n   * @param interactionType\n   */\n  async initializeAuthorizationRequest(request, interactionType) {\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, this.correlationId);\n    const redirectUri = this.getRedirectUri(request.redirectUri);\n    const browserState = {\n      interactionType: interactionType\n    };\n    const state = ProtocolUtils.setRequestState(this.browserCrypto, request && request.state || Constants.EMPTY_STRING, browserState);\n    const baseRequest = await invokeAsync(this.initializeBaseRequest.bind(this), PerformanceEvents.InitializeBaseRequest, this.logger, this.performanceClient, this.correlationId)(request);\n    const validatedRequest = {\n      ...baseRequest,\n      redirectUri: redirectUri,\n      state: state,\n      nonce: request.nonce || createNewGuid(),\n      responseMode: this.config.auth.OIDCOptions.serverResponseType\n    };\n    const account = request.account || this.browserStorage.getActiveAccount();\n    if (account) {\n      this.logger.verbose(\"Setting validated request account\", this.correlationId);\n      this.logger.verbosePii(`Setting validated request account: ${account.homeAccountId}`, this.correlationId);\n      validatedRequest.account = account;\n    }\n    // Check for ADAL/MSAL v1 SSO\n    if (!validatedRequest.loginHint && !account) {\n      const legacyLoginHint = this.browserStorage.getLegacyLoginHint();\n      if (legacyLoginHint) {\n        validatedRequest.loginHint = legacyLoginHint;\n      }\n    }\n    return validatedRequest;\n  }\n}\nexport { StandardInteractionClient };","map":{"version":3,"names":["StandardInteractionClient","BaseInteractionClient","initializeAuthorizationCodeRequest","request","performanceClient","addQueueMeasurement","PerformanceEvents","StandardInteractionClientInitializeAuthorizationCodeRequest","correlationId","generatedPkceParams","invokeAsync","generatePkceCodes","GeneratePkceCodes","logger","authCodeRequest","redirectUri","code","Constants","EMPTY_STRING","codeVerifier","verifier","codeChallenge","challenge","codeChallengeMethod","S256_CODE_CHALLENGE_METHOD","initializeLogoutRequest","logoutRequest","verbose","validLogoutRequest","createNewGuid","logoutHint","account","getLogoutHintFromIdTokenClaims","postLogoutRedirectUri","UrlString","getAbsoluteUrl","getCurrentUri","config","auth","idTokenClaims","login_hint","createAuthCodeClient","serverTelemetryManager","authorityUrl","requestAzureCloudOptions","StandardInteractionClientCreateAuthCodeClient","clientConfig","getClientConfiguration","bind","StandardInteractionClientGetClientConfiguration","AuthorizationCodeClient","requestAuthority","discoveredAuthority","getDiscoveredAuthority","StandardInteractionClientGetDiscoveredAuthority","system","loggerOptions","authOptions","clientId","authority","clientCapabilities","systemOptions","tokenRenewalOffsetSeconds","preventCorsPreflight","loggerCallback","piiLoggingEnabled","logLevel","cacheOptions","claimsBasedCachingEnabled","cache","cryptoInterface","browserCrypto","networkInterface","networkClient","storageInterface","browserStorage","libraryInfo","sku","BrowserConstants","MSAL_SKU","version","cpu","os","telemetry","authorityOptions","protocolMode","OIDCOptions","knownAuthorities","cloudDiscoveryMetadata","authorityMetadata","skipAuthorityMetadataCache","userAuthority","builtAuthority","Authority","generateAuthority","azureCloudOptions","AuthorityFactory","createDiscoveredInstance","AuthorityFactoryCreateDiscoveredInstance","initializeAuthorizationRequest","interactionType","StandardInteractionClientInitializeAuthorizationRequest","getRedirectUri","browserState","state","ProtocolUtils","setRequestState","baseRequest","initializeBaseRequest","InitializeBaseRequest","validatedRequest","nonce","responseMode","serverResponseType","getActiveAccount","verbosePii","homeAccountId","loginHint","legacyLoginHint","getLegacyLoginHint"],"sources":["/Users/sarvagyakumar/Desktop/IISC_Project/node_modules/@azure/msal-browser/src/interaction_client/StandardInteractionClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    ServerTelemetryManager,\n    CommonAuthorizationCodeRequest,\n    Constants,\n    AuthorizationCodeClient,\n    ClientConfiguration,\n    AuthorityOptions,\n    Authority,\n    AuthorityFactory,\n    UrlString,\n    CommonEndSessionRequest,\n    ProtocolUtils,\n    ResponseMode,\n    IdTokenClaims,\n    AccountInfo,\n    AzureCloudOptions,\n    PerformanceEvents,\n    invokeAsync,\n    BaseAuthRequest,\n} from \"@azure/msal-common\";\nimport { BaseInteractionClient } from \"./BaseInteractionClient\";\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\nimport { BrowserConstants, InteractionType } from \"../utils/BrowserConstants\";\nimport { version } from \"../packageMetadata\";\nimport { BrowserStateObject } from \"../utils/BrowserProtocolUtils\";\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\nimport * as BrowserUtils from \"../utils/BrowserUtils\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\nimport { generatePkceCodes } from \"../crypto/PkceGenerator\";\nimport { createNewGuid } from \"../crypto/BrowserCrypto\";\n\n/**\n * Defines the class structure and helper functions used by the \"standard\", non-brokered auth flows (popup, redirect, silent (RT), silent (iframe))\n */\nexport abstract class StandardInteractionClient extends BaseInteractionClient {\n    /**\n     * Generates an auth code request tied to the url request.\n     * @param request\n     */\n    protected async initializeAuthorizationCodeRequest(\n        request: AuthorizationUrlRequest\n    ): Promise<CommonAuthorizationCodeRequest> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest,\n            this.correlationId\n        );\n        const generatedPkceParams = await invokeAsync(\n            generatePkceCodes,\n            PerformanceEvents.GeneratePkceCodes,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(this.performanceClient, this.logger, this.correlationId);\n\n        const authCodeRequest: CommonAuthorizationCodeRequest = {\n            ...request,\n            redirectUri: request.redirectUri,\n            code: Constants.EMPTY_STRING,\n            codeVerifier: generatedPkceParams.verifier,\n        };\n\n        request.codeChallenge = generatedPkceParams.challenge;\n        request.codeChallengeMethod = Constants.S256_CODE_CHALLENGE_METHOD;\n\n        return authCodeRequest;\n    }\n\n    /**\n     * Initializer for the logout request.\n     * @param logoutRequest\n     */\n    protected initializeLogoutRequest(\n        logoutRequest?: EndSessionRequest\n    ): CommonEndSessionRequest {\n        this.logger.verbose(\n            \"initializeLogoutRequest called\",\n            logoutRequest?.correlationId\n        );\n\n        const validLogoutRequest: CommonEndSessionRequest = {\n            correlationId: this.correlationId || createNewGuid(),\n            ...logoutRequest,\n        };\n\n        /**\n         * Set logout_hint to be login_hint from ID Token Claims if present\n         * and logoutHint attribute wasn't manually set in logout request\n         */\n        if (logoutRequest) {\n            // If logoutHint isn't set and an account was passed in, try to extract logoutHint from ID Token Claims\n            if (!logoutRequest.logoutHint) {\n                if (logoutRequest.account) {\n                    const logoutHint = this.getLogoutHintFromIdTokenClaims(\n                        logoutRequest.account\n                    );\n                    if (logoutHint) {\n                        this.logger.verbose(\n                            \"Setting logoutHint to login_hint ID Token Claim value for the account provided\"\n                        );\n                        validLogoutRequest.logoutHint = logoutHint;\n                    }\n                } else {\n                    this.logger.verbose(\n                        \"logoutHint was not set and account was not passed into logout request, logoutHint will not be set\"\n                    );\n                }\n            } else {\n                this.logger.verbose(\n                    \"logoutHint has already been set in logoutRequest\"\n                );\n            }\n        } else {\n            this.logger.verbose(\n                \"logoutHint will not be set since no logout request was configured\"\n            );\n        }\n\n        /*\n         * Only set redirect uri if logout request isn't provided or the set uri isn't null.\n         * Otherwise, use passed uri, config, or current page.\n         */\n        if (!logoutRequest || logoutRequest.postLogoutRedirectUri !== null) {\n            if (logoutRequest && logoutRequest.postLogoutRedirectUri) {\n                this.logger.verbose(\n                    \"Setting postLogoutRedirectUri to uri set on logout request\",\n                    validLogoutRequest.correlationId\n                );\n                validLogoutRequest.postLogoutRedirectUri =\n                    UrlString.getAbsoluteUrl(\n                        logoutRequest.postLogoutRedirectUri,\n                        BrowserUtils.getCurrentUri()\n                    );\n            } else if (this.config.auth.postLogoutRedirectUri === null) {\n                this.logger.verbose(\n                    \"postLogoutRedirectUri configured as null and no uri set on request, not passing post logout redirect\",\n                    validLogoutRequest.correlationId\n                );\n            } else if (this.config.auth.postLogoutRedirectUri) {\n                this.logger.verbose(\n                    \"Setting postLogoutRedirectUri to configured uri\",\n                    validLogoutRequest.correlationId\n                );\n                validLogoutRequest.postLogoutRedirectUri =\n                    UrlString.getAbsoluteUrl(\n                        this.config.auth.postLogoutRedirectUri,\n                        BrowserUtils.getCurrentUri()\n                    );\n            } else {\n                this.logger.verbose(\n                    \"Setting postLogoutRedirectUri to current page\",\n                    validLogoutRequest.correlationId\n                );\n                validLogoutRequest.postLogoutRedirectUri =\n                    UrlString.getAbsoluteUrl(\n                        BrowserUtils.getCurrentUri(),\n                        BrowserUtils.getCurrentUri()\n                    );\n            }\n        } else {\n            this.logger.verbose(\n                \"postLogoutRedirectUri passed as null, not setting post logout redirect uri\",\n                validLogoutRequest.correlationId\n            );\n        }\n\n        return validLogoutRequest;\n    }\n\n    /**\n     * Parses login_hint ID Token Claim out of AccountInfo object to be used as\n     * logout_hint in end session request.\n     * @param account\n     */\n    protected getLogoutHintFromIdTokenClaims(\n        account: AccountInfo\n    ): string | null {\n        const idTokenClaims: IdTokenClaims | undefined = account.idTokenClaims;\n        if (idTokenClaims) {\n            if (idTokenClaims.login_hint) {\n                return idTokenClaims.login_hint;\n            } else {\n                this.logger.verbose(\n                    \"The ID Token Claims tied to the provided account do not contain a login_hint claim, logoutHint will not be added to logout request\"\n                );\n            }\n        } else {\n            this.logger.verbose(\n                \"The provided account does not contain ID Token Claims, logoutHint will not be added to logout request\"\n            );\n        }\n\n        return null;\n    }\n\n    /**\n     * Creates an Authorization Code Client with the given authority, or the default authority.\n     * @param serverTelemetryManager\n     * @param authorityUrl\n     */\n    protected async createAuthCodeClient(\n        serverTelemetryManager: ServerTelemetryManager,\n        authorityUrl?: string,\n        requestAzureCloudOptions?: AzureCloudOptions\n    ): Promise<AuthorizationCodeClient> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,\n            this.correlationId\n        );\n        // Create auth module.\n        const clientConfig = await invokeAsync(\n            this.getClientConfiguration.bind(this),\n            PerformanceEvents.StandardInteractionClientGetClientConfiguration,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(serverTelemetryManager, authorityUrl, requestAzureCloudOptions);\n        return new AuthorizationCodeClient(\n            clientConfig,\n            this.performanceClient\n        );\n    }\n\n    /**\n     * Creates a Client Configuration object with the given request authority, or the default authority.\n     * @param serverTelemetryManager\n     * @param requestAuthority\n     * @param requestCorrelationId\n     */\n    protected async getClientConfiguration(\n        serverTelemetryManager: ServerTelemetryManager,\n        requestAuthority?: string,\n        requestAzureCloudOptions?: AzureCloudOptions\n    ): Promise<ClientConfiguration> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.StandardInteractionClientGetClientConfiguration,\n            this.correlationId\n        );\n        const discoveredAuthority = await invokeAsync(\n            this.getDiscoveredAuthority.bind(this),\n            PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(requestAuthority, requestAzureCloudOptions);\n        const logger = this.config.system.loggerOptions;\n\n        return {\n            authOptions: {\n                clientId: this.config.auth.clientId,\n                authority: discoveredAuthority,\n                clientCapabilities: this.config.auth.clientCapabilities,\n            },\n            systemOptions: {\n                tokenRenewalOffsetSeconds:\n                    this.config.system.tokenRenewalOffsetSeconds,\n                preventCorsPreflight: true,\n            },\n            loggerOptions: {\n                loggerCallback: logger.loggerCallback,\n                piiLoggingEnabled: logger.piiLoggingEnabled,\n                logLevel: logger.logLevel,\n                correlationId: this.correlationId,\n            },\n            cacheOptions: {\n                claimsBasedCachingEnabled:\n                    this.config.cache.claimsBasedCachingEnabled,\n            },\n            cryptoInterface: this.browserCrypto,\n            networkInterface: this.networkClient,\n            storageInterface: this.browserStorage,\n            serverTelemetryManager: serverTelemetryManager,\n            libraryInfo: {\n                sku: BrowserConstants.MSAL_SKU,\n                version: version,\n                cpu: Constants.EMPTY_STRING,\n                os: Constants.EMPTY_STRING,\n            },\n            telemetry: this.config.telemetry,\n        };\n    }\n\n    /**\n     * Used to get a discovered version of the default authority.\n     * @param requestAuthority\n     * @param requestCorrelationId\n     */\n    protected async getDiscoveredAuthority(\n        requestAuthority?: string,\n        requestAzureCloudOptions?: AzureCloudOptions\n    ): Promise<Authority> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority,\n            this.correlationId\n        );\n        const authorityOptions: AuthorityOptions = {\n            protocolMode: this.config.auth.protocolMode,\n            OIDCOptions: this.config.auth.OIDCOptions,\n            knownAuthorities: this.config.auth.knownAuthorities,\n            cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n            authorityMetadata: this.config.auth.authorityMetadata,\n            skipAuthorityMetadataCache:\n                this.config.auth.skipAuthorityMetadataCache,\n        };\n\n        // build authority string based on auth params, precedence - azureCloudInstance + tenant >> authority\n        const userAuthority = requestAuthority\n            ? requestAuthority\n            : this.config.auth.authority;\n\n        // fall back to the authority from config\n        const builtAuthority = Authority.generateAuthority(\n            userAuthority,\n            requestAzureCloudOptions || this.config.auth.azureCloudOptions\n        );\n        return invokeAsync(\n            AuthorityFactory.createDiscoveredInstance.bind(AuthorityFactory),\n            PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(\n            builtAuthority,\n            this.config.system.networkClient,\n            this.browserStorage,\n            authorityOptions,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        );\n    }\n\n    /**\n     * Helper to initialize required request parameters for interactive APIs and ssoSilent()\n     * @param request\n     * @param interactionType\n     */\n    protected async initializeAuthorizationRequest(\n        request: RedirectRequest | PopupRequest | SsoSilentRequest,\n        interactionType: InteractionType\n    ): Promise<AuthorizationUrlRequest> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest,\n            this.correlationId\n        );\n\n        const redirectUri = this.getRedirectUri(request.redirectUri);\n        const browserState: BrowserStateObject = {\n            interactionType: interactionType,\n        };\n        const state = ProtocolUtils.setRequestState(\n            this.browserCrypto,\n            (request && request.state) || Constants.EMPTY_STRING,\n            browserState\n        );\n\n        const baseRequest: BaseAuthRequest = await invokeAsync(\n            this.initializeBaseRequest.bind(this),\n            PerformanceEvents.InitializeBaseRequest,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(request);\n\n        const validatedRequest: AuthorizationUrlRequest = {\n            ...baseRequest,\n            redirectUri: redirectUri,\n            state: state,\n            nonce: request.nonce || createNewGuid(),\n            responseMode: this.config.auth.OIDCOptions\n                .serverResponseType as ResponseMode,\n        };\n\n        const account =\n            request.account || this.browserStorage.getActiveAccount();\n        if (account) {\n            this.logger.verbose(\n                \"Setting validated request account\",\n                this.correlationId\n            );\n            this.logger.verbosePii(\n                `Setting validated request account: ${account.homeAccountId}`,\n                this.correlationId\n            );\n            validatedRequest.account = account;\n        }\n\n        // Check for ADAL/MSAL v1 SSO\n        if (!validatedRequest.loginHint && !account) {\n            const legacyLoginHint = this.browserStorage.getLegacyLoginHint();\n            if (legacyLoginHint) {\n                validatedRequest.loginHint = legacyLoginHint;\n            }\n        }\n\n        return validatedRequest;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}