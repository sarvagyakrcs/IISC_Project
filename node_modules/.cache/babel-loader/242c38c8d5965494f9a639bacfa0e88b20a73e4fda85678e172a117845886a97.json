{"ast":null,"code":"/*! @azure/msal-browser v3.6.0 2023-12-01 */\n'use strict';\n\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { PerformanceEvents } from '@azure/msal-common';\nimport { KEY_FORMAT_JWK } from '../utils/BrowserConstants.mjs';\nimport { cryptoNonExistent } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * This file defines functions used by the browser library to perform cryptography operations such as\n * hashing and encoding. It also has helper functions to validate the availability of specific APIs.\n */\n/**\n * See here for more info on RsaHashedKeyGenParams: https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams\n */\n// RSA KeyGen Algorithm\nconst PKCS1_V15_KEYGEN_ALG = \"RSASSA-PKCS1-v1_5\";\n// SHA-256 hashing algorithm\nconst S256_HASH_ALG = \"SHA-256\";\n// MOD length for PoP tokens\nconst MODULUS_LENGTH = 2048;\n// Public Exponent\nconst PUBLIC_EXPONENT = new Uint8Array([0x01, 0x00, 0x01]);\nconst keygenAlgorithmOptions = {\n  name: PKCS1_V15_KEYGEN_ALG,\n  hash: S256_HASH_ALG,\n  modulusLength: MODULUS_LENGTH,\n  publicExponent: PUBLIC_EXPONENT\n};\n/**\n * Check whether browser crypto is available.\n */\nfunction validateCryptoAvailable(logger) {\n  if (\"crypto\" in window) {\n    logger.verbose(\"BrowserCrypto: modern crypto interface available\");\n  } else {\n    logger.error(\"BrowserCrypto: crypto interface is unavailable\");\n    throw createBrowserAuthError(cryptoNonExistent);\n  }\n}\n/**\n * Returns a sha-256 hash of the given dataString as an ArrayBuffer.\n * @param dataString\n */\nasync function sha256Digest(dataString, performanceClient, correlationId) {\n  performanceClient?.addQueueMeasurement(PerformanceEvents.Sha256Digest, correlationId);\n  const encoder = new TextEncoder();\n  const data = encoder.encode(dataString);\n  return window.crypto.subtle.digest(S256_HASH_ALG, data);\n}\n/**\n * Populates buffer with cryptographically random values.\n * @param dataBuffer\n */\nfunction getRandomValues(dataBuffer) {\n  return window.crypto.getRandomValues(dataBuffer);\n}\n/**\n * Creates a new random GUID\n * @returns\n */\nfunction createNewGuid() {\n  return window.crypto.randomUUID();\n}\n/**\n * Generates a keypair based on current keygen algorithm config.\n * @param extractable\n * @param usages\n */\nasync function generateKeyPair(extractable, usages) {\n  return window.crypto.subtle.generateKey(keygenAlgorithmOptions, extractable, usages);\n}\n/**\n * Export key as Json Web Key (JWK)\n * @param key\n */\nasync function exportJwk(key) {\n  return window.crypto.subtle.exportKey(KEY_FORMAT_JWK, key);\n}\n/**\n * Imports key as Json Web Key (JWK), can set extractable and usages.\n * @param key\n * @param extractable\n * @param usages\n */\nasync function importJwk(key, extractable, usages) {\n  return window.crypto.subtle.importKey(KEY_FORMAT_JWK, key, keygenAlgorithmOptions, extractable, usages);\n}\n/**\n * Signs given data with given key\n * @param key\n * @param data\n */\nasync function sign(key, data) {\n  return window.crypto.subtle.sign(keygenAlgorithmOptions, key, data);\n}\nexport { createNewGuid, exportJwk, generateKeyPair, getRandomValues, importJwk, sha256Digest, sign, validateCryptoAvailable };","map":{"version":3,"names":["PKCS1_V15_KEYGEN_ALG","S256_HASH_ALG","MODULUS_LENGTH","PUBLIC_EXPONENT","Uint8Array","keygenAlgorithmOptions","name","hash","modulusLength","publicExponent","validateCryptoAvailable","logger","window","verbose","error","createBrowserAuthError","cryptoNonExistent","sha256Digest","dataString","performanceClient","correlationId","addQueueMeasurement","PerformanceEvents","Sha256Digest","encoder","TextEncoder","data","encode","crypto","subtle","digest","getRandomValues","dataBuffer","createNewGuid","randomUUID","generateKeyPair","extractable","usages","generateKey","exportJwk","key","exportKey","KEY_FORMAT_JWK","importJwk","importKey","sign"],"sources":["/Users/sarvagyakumar/Desktop/IISC_Project/node_modules/@azure/msal-browser/src/crypto/BrowserCrypto.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport {\n    IPerformanceClient,\n    Logger,\n    PerformanceEvents,\n} from \"@azure/msal-common\";\nimport { KEY_FORMAT_JWK } from \"../utils/BrowserConstants\";\n\n/**\n * This file defines functions used by the browser library to perform cryptography operations such as\n * hashing and encoding. It also has helper functions to validate the availability of specific APIs.\n */\n\n/**\n * See here for more info on RsaHashedKeyGenParams: https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams\n */\n// RSA KeyGen Algorithm\nconst PKCS1_V15_KEYGEN_ALG = \"RSASSA-PKCS1-v1_5\";\n// SHA-256 hashing algorithm\nconst S256_HASH_ALG = \"SHA-256\";\n// MOD length for PoP tokens\nconst MODULUS_LENGTH = 2048;\n// Public Exponent\nconst PUBLIC_EXPONENT: Uint8Array = new Uint8Array([0x01, 0x00, 0x01]);\n\nconst keygenAlgorithmOptions: RsaHashedKeyGenParams = {\n    name: PKCS1_V15_KEYGEN_ALG,\n    hash: S256_HASH_ALG,\n    modulusLength: MODULUS_LENGTH,\n    publicExponent: PUBLIC_EXPONENT,\n};\n\n/**\n * Check whether browser crypto is available.\n */\nexport function validateCryptoAvailable(logger: Logger): void {\n    if (\"crypto\" in window) {\n        logger.verbose(\"BrowserCrypto: modern crypto interface available\");\n    } else {\n        logger.error(\"BrowserCrypto: crypto interface is unavailable\");\n        throw createBrowserAuthError(BrowserAuthErrorCodes.cryptoNonExistent);\n    }\n}\n\n/**\n * Returns a sha-256 hash of the given dataString as an ArrayBuffer.\n * @param dataString\n */\nexport async function sha256Digest(\n    dataString: string,\n    performanceClient?: IPerformanceClient,\n    correlationId?: string\n): Promise<ArrayBuffer> {\n    performanceClient?.addQueueMeasurement(\n        PerformanceEvents.Sha256Digest,\n        correlationId\n    );\n    const encoder = new TextEncoder();\n    const data = encoder.encode(dataString);\n    return window.crypto.subtle.digest(\n        S256_HASH_ALG,\n        data\n    ) as Promise<ArrayBuffer>;\n}\n\n/**\n * Populates buffer with cryptographically random values.\n * @param dataBuffer\n */\nexport function getRandomValues(dataBuffer: Uint8Array): Uint8Array {\n    return window.crypto.getRandomValues(dataBuffer);\n}\n\n/**\n * Creates a new random GUID\n * @returns\n */\nexport function createNewGuid(): string {\n    return window.crypto.randomUUID();\n}\n\n/**\n * Generates a keypair based on current keygen algorithm config.\n * @param extractable\n * @param usages\n */\nexport async function generateKeyPair(\n    extractable: boolean,\n    usages: Array<KeyUsage>\n): Promise<CryptoKeyPair> {\n    return window.crypto.subtle.generateKey(\n        keygenAlgorithmOptions,\n        extractable,\n        usages\n    ) as Promise<CryptoKeyPair>;\n}\n\n/**\n * Export key as Json Web Key (JWK)\n * @param key\n */\nexport async function exportJwk(key: CryptoKey): Promise<JsonWebKey> {\n    return window.crypto.subtle.exportKey(\n        KEY_FORMAT_JWK,\n        key\n    ) as Promise<JsonWebKey>;\n}\n\n/**\n * Imports key as Json Web Key (JWK), can set extractable and usages.\n * @param key\n * @param extractable\n * @param usages\n */\nexport async function importJwk(\n    key: JsonWebKey,\n    extractable: boolean,\n    usages: Array<KeyUsage>\n): Promise<CryptoKey> {\n    return window.crypto.subtle.importKey(\n        KEY_FORMAT_JWK,\n        key,\n        keygenAlgorithmOptions,\n        extractable,\n        usages\n    ) as Promise<CryptoKey>;\n}\n\n/**\n * Signs given data with given key\n * @param key\n * @param data\n */\nexport async function sign(\n    key: CryptoKey,\n    data: ArrayBuffer\n): Promise<ArrayBuffer> {\n    return window.crypto.subtle.sign(\n        keygenAlgorithmOptions,\n        key,\n        data\n    ) as Promise<ArrayBuffer>;\n}\n"],"mappings":";;;;;;;;AAAA;;;AAGG;AAaH;;;AAGG;AAEH;;AAEG;AACH;AACA,MAAMA,oBAAoB,GAAG,mBAAmB;AAChD;AACA,MAAMC,aAAa,GAAG,SAAS;AAC/B;AACA,MAAMC,cAAc,GAAG,IAAI;AAC3B;AACA,MAAMC,eAAe,GAAe,IAAIC,UAAU,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;AAEtE,MAAMC,sBAAsB,GAA0B;EAClDC,IAAI,EAAEN,oBAAoB;EAC1BO,IAAI,EAAEN,aAAa;EACnBO,aAAa,EAAEN,cAAc;EAC7BO,cAAc,EAAEN;CACnB;AAED;;AAEG;AACG,SAAUO,uBAAuBA,CAACC,MAAc;EAClD,IAAI,QAAQ,IAAIC,MAAM,EAAE;IACpBD,MAAM,CAACE,OAAO,CAAC,kDAAkD,CAAC;EACrE,OAAM;IACHF,MAAM,CAACG,KAAK,CAAC,gDAAgD,CAAC;IAC9D,MAAMC,sBAAsB,CAACC,iBAAuC,CAAC;EACxE;AACL;AAEA;;;AAGG;AACI,eAAeC,YAAYA,CAC9BC,UAAkB,EAClBC,iBAAsC,EACtCC,aAAsB;EAEtBD,iBAAiB,EAAEE,mBAAmB,CAClCC,iBAAiB,CAACC,YAAY,EAC9BH,aAAa,CAChB;EACD,MAAMI,OAAO,GAAG,IAAIC,WAAW,EAAE;EACjC,MAAMC,IAAI,GAAGF,OAAO,CAACG,MAAM,CAACT,UAAU,CAAC;EACvC,OAAON,MAAM,CAACgB,MAAM,CAACC,MAAM,CAACC,MAAM,CAC9B7B,aAAa,EACbyB,IAAI,CACiB;AAC7B;AAEA;;;AAGG;AACG,SAAUK,eAAeA,CAACC,UAAsB;EAClD,OAAOpB,MAAM,CAACgB,MAAM,CAACG,eAAe,CAACC,UAAU,CAAC;AACpD;AAEA;;;AAGG;SACaC,aAAaA,CAAA;EACzB,OAAOrB,MAAM,CAACgB,MAAM,CAACM,UAAU,EAAE;AACrC;AAEA;;;;AAIG;AACI,eAAeC,eAAeA,CACjCC,WAAoB,EACpBC,MAAuB;EAEvB,OAAOzB,MAAM,CAACgB,MAAM,CAACC,MAAM,CAACS,WAAW,CACnCjC,sBAAsB,EACtB+B,WAAW,EACXC,MAAM,CACiB;AAC/B;AAEA;;;AAGG;AACI,eAAeE,SAASA,CAACC,GAAc;EAC1C,OAAO5B,MAAM,CAACgB,MAAM,CAACC,MAAM,CAACY,SAAS,CACjCC,cAAc,EACdF,GAAG,CACiB;AAC5B;AAEA;;;;;AAKG;AACI,eAAeG,SAASA,CAC3BH,GAAe,EACfJ,WAAoB,EACpBC,MAAuB;EAEvB,OAAOzB,MAAM,CAACgB,MAAM,CAACC,MAAM,CAACe,SAAS,CACjCF,cAAc,EACdF,GAAG,EACHnC,sBAAsB,EACtB+B,WAAW,EACXC,MAAM,CACa;AAC3B;AAEA;;;;AAIG;AACI,eAAeQ,IAAIA,CACtBL,GAAc,EACdd,IAAiB;EAEjB,OAAOd,MAAM,CAACgB,MAAM,CAACC,MAAM,CAACgB,IAAI,CAC5BxC,sBAAsB,EACtBmC,GAAG,EACHd,IAAI,CACiB;AAC7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}