{"ast":null,"code":"/*! @azure/msal-common v14.5.0 2023-12-01 */\n'use strict';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Wraps a function with a performance measurement.\n * Usage: invoke(functionToCall, performanceClient, \"EventName\", \"correlationId\")(...argsToPassToFunction)\n * @param callback\n * @param eventName\n * @param logger\n * @param telemetryClient\n * @param correlationId\n * @returns\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst invoke = (callback, eventName, logger, telemetryClient, correlationId) => {\n  return (...args) => {\n    logger.trace(`Executing function ${eventName}`);\n    const inProgressEvent = telemetryClient?.startMeasurement(eventName, correlationId);\n    try {\n      const result = callback(...args);\n      inProgressEvent?.end({\n        success: true\n      });\n      logger.trace(`Returning result from ${eventName}`);\n      return result;\n    } catch (e) {\n      logger.trace(`Error occurred in ${eventName}`);\n      try {\n        logger.trace(JSON.stringify(e));\n      } catch (e) {\n        logger.trace(\"Unable to print error message.\");\n      }\n      inProgressEvent?.end({\n        success: false\n      });\n      throw e;\n    }\n  };\n};\n/**\n * Wraps an async function with a performance measurement.\n * Usage: invokeAsync(functionToCall, performanceClient, \"EventName\", \"correlationId\")(...argsToPassToFunction)\n * @param callback\n * @param eventName\n * @param logger\n * @param telemetryClient\n * @param correlationId\n * @returns\n * @internal\n *\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst invokeAsync = (callback, eventName, logger, telemetryClient, correlationId) => {\n  return (...args) => {\n    logger.trace(`Executing function ${eventName}`);\n    const inProgressEvent = telemetryClient?.startMeasurement(eventName, correlationId);\n    telemetryClient?.setPreQueueTime(eventName, correlationId);\n    return callback(...args).then(response => {\n      logger.trace(`Returning result from ${eventName}`);\n      inProgressEvent?.end({\n        success: true\n      });\n      return response;\n    }).catch(e => {\n      logger.trace(`Error occurred in ${eventName}`);\n      try {\n        logger.trace(JSON.stringify(e));\n      } catch (e) {\n        logger.trace(\"Unable to print error message.\");\n      }\n      inProgressEvent?.end({\n        success: false\n      });\n      throw e;\n    });\n  };\n};\nexport { invoke, invokeAsync };","map":{"version":3,"names":["invoke","callback","eventName","logger","telemetryClient","correlationId","args","trace","inProgressEvent","startMeasurement","result","end","success","e","JSON","stringify","invokeAsync","setPreQueueTime","then","response","catch"],"sources":["/Users/sarvagyakumar/Desktop/IISC_Project/node_modules/@azure/msal-common/src/utils/FunctionWrappers.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Logger } from \"../logger/Logger\";\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\n\n/**\n * Wraps a function with a performance measurement.\n * Usage: invoke(functionToCall, performanceClient, \"EventName\", \"correlationId\")(...argsToPassToFunction)\n * @param callback\n * @param eventName\n * @param logger\n * @param telemetryClient\n * @param correlationId\n * @returns\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const invoke = <T extends Array<any>, U>(\n    callback: (...args: T) => U,\n    eventName: string,\n    logger: Logger,\n    telemetryClient?: IPerformanceClient,\n    correlationId?: string\n) => {\n    return (...args: T): U => {\n        logger.trace(`Executing function ${eventName}`);\n        const inProgressEvent = telemetryClient?.startMeasurement(\n            eventName,\n            correlationId\n        );\n        try {\n            const result = callback(...args);\n            inProgressEvent?.end({\n                success: true,\n            });\n            logger.trace(`Returning result from ${eventName}`);\n            return result;\n        } catch (e) {\n            logger.trace(`Error occurred in ${eventName}`);\n            try {\n                logger.trace(JSON.stringify(e));\n            } catch (e) {\n                logger.trace(\"Unable to print error message.\");\n            }\n            inProgressEvent?.end({\n                success: false,\n            });\n            throw e;\n        }\n    };\n};\n\n/**\n * Wraps an async function with a performance measurement.\n * Usage: invokeAsync(functionToCall, performanceClient, \"EventName\", \"correlationId\")(...argsToPassToFunction)\n * @param callback\n * @param eventName\n * @param logger\n * @param telemetryClient\n * @param correlationId\n * @returns\n * @internal\n *\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const invokeAsync = <T extends Array<any>, U>(\n    callback: (...args: T) => Promise<U>,\n    eventName: string,\n    logger: Logger,\n    telemetryClient?: IPerformanceClient,\n    correlationId?: string\n) => {\n    return (...args: T): Promise<U> => {\n        logger.trace(`Executing function ${eventName}`);\n        const inProgressEvent = telemetryClient?.startMeasurement(\n            eventName,\n            correlationId\n        );\n        telemetryClient?.setPreQueueTime(eventName, correlationId);\n        return callback(...args)\n            .then((response) => {\n                logger.trace(`Returning result from ${eventName}`);\n                inProgressEvent?.end({\n                    success: true,\n                });\n                return response;\n            })\n            .catch((e) => {\n                logger.trace(`Error occurred in ${eventName}`);\n                try {\n                    logger.trace(JSON.stringify(e));\n                } catch (e) {\n                    logger.trace(\"Unable to print error message.\");\n                }\n                inProgressEvent?.end({\n                    success: false,\n                });\n                throw e;\n            });\n    };\n};\n"],"mappings":";;;AAAA;;;AAGG;AAKH;;;;;;;;;;AAUG;AACH;AACO,MAAMA,MAAM,GAAGA,CAClBC,QAA2B,EAC3BC,SAAiB,EACjBC,MAAc,EACdC,eAAoC,EACpCC,aAAsB,KACtB;EACA,OAAO,CAAC,GAAGC,IAAO,KAAO;IACrBH,MAAM,CAACI,KAAK,CAAC,sBAAsBL,SAAS,EAAE,CAAC;IAC/C,MAAMM,eAAe,GAAGJ,eAAe,EAAEK,gBAAgB,CACrDP,SAAS,EACTG,aAAa,CAChB;IACD,IAAI;MACA,MAAMK,MAAM,GAAGT,QAAQ,CAAC,GAAGK,IAAI,CAAC;MAChCE,eAAe,EAAEG,GAAG,CAAC;QACjBC,OAAO,EAAE;MACZ,EAAC;MACFT,MAAM,CAACI,KAAK,CAAC,yBAAyBL,SAAS,EAAE,CAAC;MAClD,OAAOQ,MAAM;IAChB,EAAC,OAAOG,CAAC,EAAE;MACRV,MAAM,CAACI,KAAK,CAAC,qBAAqBL,SAAS,EAAE,CAAC;MAC9C,IAAI;QACAC,MAAM,CAACI,KAAK,CAACO,IAAI,CAACC,SAAS,CAACF,CAAC,CAAC,CAAC;MAClC,EAAC,OAAOA,CAAC,EAAE;QACRV,MAAM,CAACI,KAAK,CAAC,gCAAgC,CAAC;MACjD;MACDC,eAAe,EAAEG,GAAG,CAAC;QACjBC,OAAO,EAAE;MACZ,EAAC;MACF,MAAMC,CAAC;IACV;EACL,CAAC;AACL;AAEA;;;;;;;;;;;AAWG;AACH;AACO,MAAMG,WAAW,GAAGA,CACvBf,QAAoC,EACpCC,SAAiB,EACjBC,MAAc,EACdC,eAAoC,EACpCC,aAAsB,KACtB;EACA,OAAO,CAAC,GAAGC,IAAO,KAAgB;IAC9BH,MAAM,CAACI,KAAK,CAAC,sBAAsBL,SAAS,EAAE,CAAC;IAC/C,MAAMM,eAAe,GAAGJ,eAAe,EAAEK,gBAAgB,CACrDP,SAAS,EACTG,aAAa,CAChB;IACDD,eAAe,EAAEa,eAAe,CAACf,SAAS,EAAEG,aAAa,CAAC;IAC1D,OAAOJ,QAAQ,CAAC,GAAGK,IAAI,CAAC,CACnBY,IAAI,CAAEC,QAAQ,IAAI;MACfhB,MAAM,CAACI,KAAK,CAAC,yBAAyBL,SAAS,EAAE,CAAC;MAClDM,eAAe,EAAEG,GAAG,CAAC;QACjBC,OAAO,EAAE;MACZ,EAAC;MACF,OAAOO,QAAQ;IACnB,CAAC,CAAC,CACDC,KAAK,CAAEP,CAAC,IAAI;MACTV,MAAM,CAACI,KAAK,CAAC,qBAAqBL,SAAS,EAAE,CAAC;MAC9C,IAAI;QACAC,MAAM,CAACI,KAAK,CAACO,IAAI,CAACC,SAAS,CAACF,CAAC,CAAC,CAAC;MAClC,EAAC,OAAOA,CAAC,EAAE;QACRV,MAAM,CAACI,KAAK,CAAC,gCAAgC,CAAC;MACjD;MACDC,eAAe,EAAEG,GAAG,CAAC;QACjBC,OAAO,EAAE;MACZ,EAAC;MACF,MAAMC,CAAC;IACX,CAAC,CAAC;EACV,CAAC;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}