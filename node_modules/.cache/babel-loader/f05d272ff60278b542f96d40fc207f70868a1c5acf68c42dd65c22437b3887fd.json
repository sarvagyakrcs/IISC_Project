{"ast":null,"code":"/*! @azure/msal-browser v3.6.0 2023-12-01 */\n'use strict';\n\nimport { RequestParameterBuilder, StringUtils, AuthenticationScheme, createClientAuthError, ClientAuthErrorCodes, AuthToken, AuthError, InteractionRequiredAuthError, ServerError, ClientAuthError } from '@azure/msal-common';\nimport { isBridgeError } from '../BridgeError.mjs';\nimport { BridgeStatusCode } from '../BridgeStatusCode.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass NestedAppAuthAdapter {\n  constructor(clientId, clientCapabilities, crypto, logger) {\n    this.clientId = clientId;\n    this.clientCapabilities = clientCapabilities;\n    this.crypto = crypto;\n    this.logger = logger;\n  }\n  toNaaTokenRequest(request) {\n    let extraParams;\n    if (request.extraQueryParameters === undefined) {\n      extraParams = new Map();\n    } else {\n      extraParams = new Map(Object.entries(request.extraQueryParameters));\n    }\n    const requestBuilder = new RequestParameterBuilder();\n    const claims = requestBuilder.addClientCapabilitiesToClaims(request.claims, this.clientCapabilities);\n    const tokenRequest = {\n      userObjectId: request.account?.homeAccountId,\n      clientId: this.clientId,\n      authority: request.authority,\n      scope: request.scopes.join(\" \"),\n      correlationId: request.correlationId !== undefined ? request.correlationId : this.crypto.createNewGuid(),\n      nonce: request.nonce,\n      claims: !StringUtils.isEmptyObj(claims) ? claims : undefined,\n      state: request.state,\n      authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER,\n      extraParameters: extraParams\n    };\n    return tokenRequest;\n  }\n  fromNaaTokenResponse(request, response, reqTimestamp) {\n    if (!response.id_token || !response.access_token) {\n      throw createClientAuthError(ClientAuthErrorCodes.nullOrEmptyToken);\n    }\n    const expiresOn = new Date((reqTimestamp + (response.expires_in || 0)) * 1000);\n    const idTokenClaims = AuthToken.extractTokenClaims(response.id_token, this.crypto.base64Decode);\n    const account = this.fromNaaAccountInfo(response.account, idTokenClaims);\n    const authenticationResult = {\n      authority: response.authority || account.environment,\n      uniqueId: account.localAccountId,\n      tenantId: account.tenantId,\n      scopes: response.scope.split(\" \"),\n      account,\n      idToken: response.id_token !== undefined ? response.id_token : \"\",\n      idTokenClaims,\n      accessToken: response.access_token,\n      fromCache: true,\n      expiresOn: expiresOn,\n      tokenType: request.authenticationScheme || AuthenticationScheme.BEARER,\n      correlationId: request.correlationId,\n      extExpiresOn: expiresOn,\n      state: request.state\n    };\n    return authenticationResult;\n  }\n  /*\n   *  export type AccountInfo = {\n   *     homeAccountId: string;\n   *     environment: string;\n   *     tenantId: string;\n   *     username: string;\n   *     localAccountId: string;\n   *     name?: string;\n   *     idToken?: string;\n   *     idTokenClaims?: TokenClaims & {\n   *         [key: string]:\n   *             | string\n   *             | number\n   *             | string[]\n   *             | object\n   *             | undefined\n   *             | unknown;\n   *     };\n   *     nativeAccountId?: string;\n   *     authorityType?: string;\n   * };\n   */\n  fromNaaAccountInfo(fromAccount, idTokenClaims) {\n    const effectiveIdTokenClaims = idTokenClaims || fromAccount.idTokenClaims;\n    const localAccountId = fromAccount.localAccountId || effectiveIdTokenClaims?.oid || effectiveIdTokenClaims?.sub || \"\";\n    const tenantId = fromAccount.tenantId || effectiveIdTokenClaims?.tid || \"\";\n    const homeAccountId = fromAccount.homeAccountId || `${localAccountId}.${tenantId}`;\n    const username = fromAccount.username || effectiveIdTokenClaims?.preferred_username || \"\";\n    const name = fromAccount.name || effectiveIdTokenClaims?.name;\n    const account = {\n      homeAccountId,\n      environment: fromAccount.environment,\n      tenantId,\n      username,\n      localAccountId,\n      name,\n      idToken: fromAccount.idToken,\n      idTokenClaims: effectiveIdTokenClaims\n    };\n    return account;\n  }\n  /**\n   *\n   * @param error BridgeError\n   * @returns AuthError, ClientAuthError, ClientConfigurationError, ServerError, InteractionRequiredError\n   */\n  fromBridgeError(error) {\n    if (isBridgeError(error)) {\n      switch (error.status) {\n        case BridgeStatusCode.USER_CANCEL:\n          return new ClientAuthError(ClientAuthErrorCodes.userCanceled);\n        case BridgeStatusCode.NO_NETWORK:\n          return new ClientAuthError(ClientAuthErrorCodes.noNetworkConnectivity);\n        case BridgeStatusCode.ACCOUNT_UNAVAILABLE:\n          return new ClientAuthError(ClientAuthErrorCodes.noAccountFound);\n        case BridgeStatusCode.DISABLED:\n          return new ClientAuthError(ClientAuthErrorCodes.nestedAppAuthBridgeDisabled);\n        case BridgeStatusCode.NESTED_APP_AUTH_UNAVAILABLE:\n          return new ClientAuthError(error.code || ClientAuthErrorCodes.nestedAppAuthBridgeDisabled, error.description);\n        case BridgeStatusCode.TRANSIENT_ERROR:\n        case BridgeStatusCode.PERSISTENT_ERROR:\n          return new ServerError(error.code, error.description);\n        case BridgeStatusCode.USER_INTERACTION_REQUIRED:\n          return new InteractionRequiredAuthError(error.code, error.description);\n        default:\n          return new AuthError(error.code, error.description);\n      }\n    } else {\n      return new AuthError(\"unknown_error\", \"An unknown error occurred\");\n    }\n  }\n}\nexport { NestedAppAuthAdapter };","map":{"version":3,"names":["NestedAppAuthAdapter","constructor","clientId","clientCapabilities","crypto","logger","toNaaTokenRequest","request","extraParams","extraQueryParameters","undefined","Map","Object","entries","requestBuilder","RequestParameterBuilder","claims","addClientCapabilitiesToClaims","tokenRequest","userObjectId","account","homeAccountId","authority","scope","scopes","join","correlationId","createNewGuid","nonce","StringUtils","isEmptyObj","state","authenticationScheme","AuthenticationScheme","BEARER","extraParameters","fromNaaTokenResponse","response","reqTimestamp","id_token","access_token","createClientAuthError","ClientAuthErrorCodes","nullOrEmptyToken","expiresOn","Date","expires_in","idTokenClaims","AuthToken","extractTokenClaims","base64Decode","fromNaaAccountInfo","authenticationResult","environment","uniqueId","localAccountId","tenantId","split","idToken","accessToken","fromCache","tokenType","extExpiresOn","fromAccount","effectiveIdTokenClaims","oid","sub","tid","username","preferred_username","name","fromBridgeError","error","isBridgeError","status","BridgeStatusCode","USER_CANCEL","ClientAuthError","userCanceled","NO_NETWORK","noNetworkConnectivity","ACCOUNT_UNAVAILABLE","noAccountFound","DISABLED","nestedAppAuthBridgeDisabled","NESTED_APP_AUTH_UNAVAILABLE","code","description","TRANSIENT_ERROR","PERSISTENT_ERROR","ServerError","USER_INTERACTION_REQUIRED","InteractionRequiredAuthError","AuthError"],"sources":["/Users/sarvagyakumar/Desktop/IISC_Project/node_modules/@azure/msal-browser/src/naa/mapping/NestedAppAuthAdapter.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { TokenRequest } from \"../TokenRequest\";\nimport { AccountInfo as NaaAccountInfo } from \"../AccountInfo\";\nimport { RedirectRequest } from \"../../request/RedirectRequest\";\nimport { PopupRequest } from \"../../request/PopupRequest\";\nimport { TokenResponse } from \"../TokenResponse\";\nimport {\n    AccountInfo as MsalAccountInfo,\n    AuthError,\n    ClientAuthError,\n    ClientConfigurationError,\n    InteractionRequiredAuthError,\n    ServerError,\n    ICrypto,\n    Logger,\n    AuthToken,\n    TokenClaims,\n    ClientAuthErrorCodes,\n    AuthenticationScheme,\n    RequestParameterBuilder,\n    StringUtils,\n    createClientAuthError,\n} from \"@azure/msal-common\";\nimport { isBridgeError } from \"../BridgeError\";\nimport { BridgeStatusCode } from \"../BridgeStatusCode\";\nimport { AuthenticationResult } from \"../../response/AuthenticationResult\";\nimport {} from \"../../error/BrowserAuthErrorCodes\";\n\nexport class NestedAppAuthAdapter {\n    protected crypto: ICrypto;\n    protected logger: Logger;\n    protected clientId: string;\n    protected clientCapabilities: string[];\n\n    constructor(\n        clientId: string,\n        clientCapabilities: string[],\n        crypto: ICrypto,\n        logger: Logger\n    ) {\n        this.clientId = clientId;\n        this.clientCapabilities = clientCapabilities;\n        this.crypto = crypto;\n        this.logger = logger;\n    }\n\n    public toNaaTokenRequest(\n        request: PopupRequest | RedirectRequest\n    ): TokenRequest {\n        let extraParams: Map<string, string>;\n        if (request.extraQueryParameters === undefined) {\n            extraParams = new Map<string, string>();\n        } else {\n            extraParams = new Map<string, string>(\n                Object.entries(request.extraQueryParameters)\n            );\n        }\n\n        const requestBuilder = new RequestParameterBuilder();\n        const claims = requestBuilder.addClientCapabilitiesToClaims(\n            request.claims,\n            this.clientCapabilities\n        );\n        const tokenRequest: TokenRequest = {\n            userObjectId: request.account?.homeAccountId,\n            clientId: this.clientId,\n            authority: request.authority,\n            scope: request.scopes.join(\" \"),\n            correlationId:\n                request.correlationId !== undefined\n                    ? request.correlationId\n                    : this.crypto.createNewGuid(),\n            nonce: request.nonce,\n            claims: !StringUtils.isEmptyObj(claims) ? claims : undefined,\n            state: request.state,\n            authenticationScheme:\n                request.authenticationScheme || AuthenticationScheme.BEARER,\n            extraParameters: extraParams,\n        };\n\n        return tokenRequest;\n    }\n\n    public fromNaaTokenResponse(\n        request: TokenRequest,\n        response: TokenResponse,\n        reqTimestamp: number\n    ): AuthenticationResult {\n        if (!response.id_token || !response.access_token) {\n            throw createClientAuthError(ClientAuthErrorCodes.nullOrEmptyToken);\n        }\n\n        const expiresOn = new Date(\n            (reqTimestamp + (response.expires_in || 0)) * 1000\n        );\n        const idTokenClaims = AuthToken.extractTokenClaims(\n            response.id_token,\n            this.crypto.base64Decode\n        );\n        const account = this.fromNaaAccountInfo(\n            response.account,\n            idTokenClaims\n        );\n\n        const authenticationResult: AuthenticationResult = {\n            authority: response.authority || account.environment,\n            uniqueId: account.localAccountId,\n            tenantId: account.tenantId,\n            scopes: response.scope.split(\" \"),\n            account,\n            idToken: response.id_token !== undefined ? response.id_token : \"\",\n            idTokenClaims,\n            accessToken: response.access_token,\n            fromCache: true,\n            expiresOn: expiresOn,\n            tokenType:\n                request.authenticationScheme || AuthenticationScheme.BEARER,\n            correlationId: request.correlationId,\n            extExpiresOn: expiresOn,\n            state: request.state,\n        };\n\n        return authenticationResult;\n    }\n\n    /*\n     *  export type AccountInfo = {\n     *     homeAccountId: string;\n     *     environment: string;\n     *     tenantId: string;\n     *     username: string;\n     *     localAccountId: string;\n     *     name?: string;\n     *     idToken?: string;\n     *     idTokenClaims?: TokenClaims & {\n     *         [key: string]:\n     *             | string\n     *             | number\n     *             | string[]\n     *             | object\n     *             | undefined\n     *             | unknown;\n     *     };\n     *     nativeAccountId?: string;\n     *     authorityType?: string;\n     * };\n     */\n    public fromNaaAccountInfo(\n        fromAccount: NaaAccountInfo,\n        idTokenClaims?: TokenClaims\n    ): MsalAccountInfo {\n        const effectiveIdTokenClaims =\n            idTokenClaims || (fromAccount.idTokenClaims as TokenClaims);\n\n        const localAccountId =\n            fromAccount.localAccountId ||\n            effectiveIdTokenClaims?.oid ||\n            effectiveIdTokenClaims?.sub ||\n            \"\";\n\n        const tenantId =\n            fromAccount.tenantId || effectiveIdTokenClaims?.tid || \"\";\n\n        const homeAccountId =\n            fromAccount.homeAccountId || `${localAccountId}.${tenantId}`;\n\n        const username =\n            fromAccount.username ||\n            effectiveIdTokenClaims?.preferred_username ||\n            \"\";\n\n        const name = fromAccount.name || effectiveIdTokenClaims?.name;\n\n        const account: MsalAccountInfo = {\n            homeAccountId,\n            environment: fromAccount.environment,\n            tenantId,\n            username,\n            localAccountId,\n            name,\n            idToken: fromAccount.idToken,\n            idTokenClaims: effectiveIdTokenClaims,\n        };\n\n        return account;\n    }\n\n    /**\n     *\n     * @param error BridgeError\n     * @returns AuthError, ClientAuthError, ClientConfigurationError, ServerError, InteractionRequiredError\n     */\n    public fromBridgeError(\n        error: unknown\n    ):\n        | AuthError\n        | ClientAuthError\n        | ClientConfigurationError\n        | ServerError\n        | InteractionRequiredAuthError {\n        if (isBridgeError(error)) {\n            switch (error.status) {\n                case BridgeStatusCode.USER_CANCEL:\n                    return new ClientAuthError(\n                        ClientAuthErrorCodes.userCanceled\n                    );\n                case BridgeStatusCode.NO_NETWORK:\n                    return new ClientAuthError(\n                        ClientAuthErrorCodes.noNetworkConnectivity\n                    );\n                case BridgeStatusCode.ACCOUNT_UNAVAILABLE:\n                    return new ClientAuthError(\n                        ClientAuthErrorCodes.noAccountFound\n                    );\n                case BridgeStatusCode.DISABLED:\n                    return new ClientAuthError(\n                        ClientAuthErrorCodes.nestedAppAuthBridgeDisabled\n                    );\n                case BridgeStatusCode.NESTED_APP_AUTH_UNAVAILABLE:\n                    return new ClientAuthError(\n                        error.code ||\n                            ClientAuthErrorCodes.nestedAppAuthBridgeDisabled,\n                        error.description\n                    );\n                case BridgeStatusCode.TRANSIENT_ERROR:\n                case BridgeStatusCode.PERSISTENT_ERROR:\n                    return new ServerError(error.code, error.description);\n                case BridgeStatusCode.USER_INTERACTION_REQUIRED:\n                    return new InteractionRequiredAuthError(\n                        error.code,\n                        error.description\n                    );\n                default:\n                    return new AuthError(error.code, error.description);\n            }\n        } else {\n            return new AuthError(\"unknown_error\", \"An unknown error occurred\");\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}