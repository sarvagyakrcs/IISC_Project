{"ast":null,"code":"/*! @azure/msal-browser v3.6.0 2023-12-01 */\n'use strict';\n\nimport { PerformanceClient, Constants, Logger } from '@azure/msal-common';\nimport { BrowserPerformanceMeasurement } from './BrowserPerformanceMeasurement.mjs';\nimport { name, version } from '../packageMetadata.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass BrowserPerformanceClient extends PerformanceClient {\n  constructor(configuration, intFields) {\n    super(configuration.auth.clientId, configuration.auth.authority || `${Constants.DEFAULT_AUTHORITY}`, new Logger(configuration.system?.loggerOptions || {}, name, version), name, version, configuration.telemetry?.application || {\n      appName: \"\",\n      appVersion: \"\"\n    }, intFields);\n  }\n  startPerformanceMeasurement(measureName, correlationId) {\n    return new BrowserPerformanceMeasurement(measureName, correlationId);\n  }\n  generateId() {\n    return window.crypto.randomUUID();\n  }\n  getPageVisibility() {\n    return document.visibilityState?.toString() || null;\n  }\n  deleteIncompleteSubMeasurements(inProgressEvent) {\n    const rootEvent = this.eventsByCorrelationId.get(inProgressEvent.event.correlationId);\n    const isRootEvent = rootEvent && rootEvent.eventId === inProgressEvent.event.eventId;\n    const incompleteMeasurements = [];\n    if (isRootEvent && rootEvent?.incompleteSubMeasurements) {\n      rootEvent.incompleteSubMeasurements.forEach(subMeasurement => {\n        incompleteMeasurements.push({\n          ...subMeasurement\n        });\n      });\n    }\n    // Clean up remaining marks for incomplete sub-measurements\n    if (incompleteMeasurements.length > 0) {\n      BrowserPerformanceMeasurement.flushMeasurements(inProgressEvent.event.correlationId, incompleteMeasurements);\n    }\n  }\n  supportsBrowserPerformanceNow() {\n    return typeof window !== \"undefined\" && typeof window.performance !== \"undefined\" && typeof window.performance.now === \"function\";\n  }\n  /**\n   * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\n   * Also captures browser page visibilityState.\n   *\n   * @param {PerformanceEvents} measureName\n   * @param {?string} [correlationId]\n   * @returns {((event?: Partial<PerformanceEvent>) => PerformanceEvent| null)}\n   */\n  startMeasurement(measureName, correlationId) {\n    // Capture page visibilityState and then invoke start/end measurement\n    const startPageVisibility = this.getPageVisibility();\n    const inProgressEvent = super.startMeasurement(measureName, correlationId);\n    return {\n      ...inProgressEvent,\n      end: event => {\n        const res = inProgressEvent.end({\n          startPageVisibility,\n          endPageVisibility: this.getPageVisibility(),\n          ...event\n        });\n        this.deleteIncompleteSubMeasurements(inProgressEvent);\n        return res;\n      },\n      discard: () => {\n        inProgressEvent.discard();\n        this.deleteIncompleteSubMeasurements(inProgressEvent);\n        inProgressEvent.measurement.flushMeasurement();\n      }\n    };\n  }\n  /**\n   * Adds pre-queue time to preQueueTimeByCorrelationId map.\n   * @param {PerformanceEvents} eventName\n   * @param {?string} correlationId\n   * @returns\n   */\n  setPreQueueTime(eventName, correlationId) {\n    if (!this.supportsBrowserPerformanceNow()) {\n      this.logger.trace(`BrowserPerformanceClient: window performance API not available, unable to set telemetry queue time for ${eventName}`);\n      return;\n    }\n    if (!correlationId) {\n      this.logger.trace(`BrowserPerformanceClient: correlationId for ${eventName} not provided, unable to set telemetry queue time`);\n      return;\n    }\n    const preQueueEvent = this.preQueueTimeByCorrelationId.get(correlationId);\n    /**\n     * Manually complete queue measurement if there is an incomplete pre-queue event.\n     * Incomplete pre-queue events are instrumentation bugs that should be fixed.\n     */\n    if (preQueueEvent) {\n      this.logger.trace(`BrowserPerformanceClient: Incomplete pre-queue ${preQueueEvent.name} found`, correlationId);\n      this.addQueueMeasurement(preQueueEvent.name, correlationId, undefined, true);\n    }\n    this.preQueueTimeByCorrelationId.set(correlationId, {\n      name: eventName,\n      time: window.performance.now()\n    });\n  }\n  /**\n   * Calculates and adds queue time measurement for given performance event.\n   *\n   * @param {PerformanceEvents} eventName\n   * @param {?string} correlationId\n   * @param {?number} queueTime\n   * @param {?boolean} manuallyCompleted - indicator for manually completed queue measurements\n   * @returns\n   */\n  addQueueMeasurement(eventName, correlationId, queueTime, manuallyCompleted) {\n    if (!this.supportsBrowserPerformanceNow()) {\n      this.logger.trace(`BrowserPerformanceClient: window performance API not available, unable to add queue measurement for ${eventName}`);\n      return;\n    }\n    if (!correlationId) {\n      this.logger.trace(`BrowserPerformanceClient: correlationId for ${eventName} not provided, unable to add queue measurement`);\n      return;\n    }\n    const preQueueTime = super.getPreQueueTime(eventName, correlationId);\n    if (!preQueueTime) {\n      return;\n    }\n    const currentTime = window.performance.now();\n    const resQueueTime = queueTime || super.calculateQueuedTime(preQueueTime, currentTime);\n    return super.addQueueMeasurement(eventName, correlationId, resQueueTime, manuallyCompleted);\n  }\n}\nexport { BrowserPerformanceClient };","map":{"version":3,"names":["BrowserPerformanceClient","PerformanceClient","constructor","configuration","intFields","auth","clientId","authority","Constants","DEFAULT_AUTHORITY","Logger","system","loggerOptions","name","version","telemetry","application","appName","appVersion","startPerformanceMeasurement","measureName","correlationId","BrowserPerformanceMeasurement","generateId","window","crypto","randomUUID","getPageVisibility","document","visibilityState","toString","deleteIncompleteSubMeasurements","inProgressEvent","rootEvent","eventsByCorrelationId","get","event","isRootEvent","eventId","incompleteMeasurements","incompleteSubMeasurements","forEach","subMeasurement","push","length","flushMeasurements","supportsBrowserPerformanceNow","performance","now","startMeasurement","startPageVisibility","end","res","endPageVisibility","discard","measurement","flushMeasurement","setPreQueueTime","eventName","logger","trace","preQueueEvent","preQueueTimeByCorrelationId","addQueueMeasurement","undefined","set","time","queueTime","manuallyCompleted","preQueueTime","getPreQueueTime","currentTime","resQueueTime","calculateQueuedTime"],"sources":["/Users/sarvagyakumar/Desktop/IISC_Project/node_modules/@azure/msal-browser/src/telemetry/BrowserPerformanceClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    Logger,\n    PerformanceEvent,\n    PerformanceEvents,\n    IPerformanceClient,\n    PerformanceClient,\n    IPerformanceMeasurement,\n    InProgressPerformanceEvent,\n    SubMeasurement,\n    PreQueueEvent,\n    Constants,\n} from \"@azure/msal-common\";\nimport { BrowserPerformanceMeasurement } from \"./BrowserPerformanceMeasurement\";\nimport { Configuration } from \"../config/Configuration\";\nimport { name, version } from \"../packageMetadata\";\n\nexport class BrowserPerformanceClient\n    extends PerformanceClient\n    implements IPerformanceClient\n{\n    constructor(configuration: Configuration, intFields?: Set<string>) {\n        super(\n            configuration.auth.clientId,\n            configuration.auth.authority || `${Constants.DEFAULT_AUTHORITY}`,\n            new Logger(\n                configuration.system?.loggerOptions || {},\n                name,\n                version\n            ),\n            name,\n            version,\n            configuration.telemetry?.application || {\n                appName: \"\",\n                appVersion: \"\",\n            },\n            intFields\n        );\n    }\n\n    startPerformanceMeasurement(\n        measureName: string,\n        correlationId: string\n    ): IPerformanceMeasurement {\n        return new BrowserPerformanceMeasurement(measureName, correlationId);\n    }\n\n    generateId(): string {\n        return window.crypto.randomUUID();\n    }\n\n    private getPageVisibility(): string | null {\n        return document.visibilityState?.toString() || null;\n    }\n\n    private deleteIncompleteSubMeasurements(\n        inProgressEvent: InProgressPerformanceEvent\n    ): void {\n        const rootEvent = this.eventsByCorrelationId.get(\n            inProgressEvent.event.correlationId\n        );\n        const isRootEvent =\n            rootEvent && rootEvent.eventId === inProgressEvent.event.eventId;\n        const incompleteMeasurements: SubMeasurement[] = [];\n        if (isRootEvent && rootEvent?.incompleteSubMeasurements) {\n            rootEvent.incompleteSubMeasurements.forEach((subMeasurement) => {\n                incompleteMeasurements.push({ ...subMeasurement });\n            });\n        }\n        // Clean up remaining marks for incomplete sub-measurements\n        if (incompleteMeasurements.length > 0) {\n            BrowserPerformanceMeasurement.flushMeasurements(\n                inProgressEvent.event.correlationId,\n                incompleteMeasurements\n            );\n        }\n    }\n\n    supportsBrowserPerformanceNow(): boolean {\n        return (\n            typeof window !== \"undefined\" &&\n            typeof window.performance !== \"undefined\" &&\n            typeof window.performance.now === \"function\"\n        );\n    }\n\n    /**\n     * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\n     * Also captures browser page visibilityState.\n     *\n     * @param {PerformanceEvents} measureName\n     * @param {?string} [correlationId]\n     * @returns {((event?: Partial<PerformanceEvent>) => PerformanceEvent| null)}\n     */\n    startMeasurement(\n        measureName: string,\n        correlationId?: string\n    ): InProgressPerformanceEvent {\n        // Capture page visibilityState and then invoke start/end measurement\n        const startPageVisibility = this.getPageVisibility();\n\n        const inProgressEvent = super.startMeasurement(\n            measureName,\n            correlationId\n        );\n\n        return {\n            ...inProgressEvent,\n            end: (\n                event?: Partial<PerformanceEvent>\n            ): PerformanceEvent | null => {\n                const res = inProgressEvent.end({\n                    startPageVisibility,\n                    endPageVisibility: this.getPageVisibility(),\n                    ...event,\n                });\n                this.deleteIncompleteSubMeasurements(inProgressEvent);\n\n                return res;\n            },\n            discard: () => {\n                inProgressEvent.discard();\n                this.deleteIncompleteSubMeasurements(inProgressEvent);\n                inProgressEvent.measurement.flushMeasurement();\n            },\n        };\n    }\n\n    /**\n     * Adds pre-queue time to preQueueTimeByCorrelationId map.\n     * @param {PerformanceEvents} eventName\n     * @param {?string} correlationId\n     * @returns\n     */\n    setPreQueueTime(\n        eventName: PerformanceEvents,\n        correlationId?: string\n    ): void {\n        if (!this.supportsBrowserPerformanceNow()) {\n            this.logger.trace(\n                `BrowserPerformanceClient: window performance API not available, unable to set telemetry queue time for ${eventName}`\n            );\n            return;\n        }\n\n        if (!correlationId) {\n            this.logger.trace(\n                `BrowserPerformanceClient: correlationId for ${eventName} not provided, unable to set telemetry queue time`\n            );\n            return;\n        }\n\n        const preQueueEvent: PreQueueEvent | undefined =\n            this.preQueueTimeByCorrelationId.get(correlationId);\n        /**\n         * Manually complete queue measurement if there is an incomplete pre-queue event.\n         * Incomplete pre-queue events are instrumentation bugs that should be fixed.\n         */\n        if (preQueueEvent) {\n            this.logger.trace(\n                `BrowserPerformanceClient: Incomplete pre-queue ${preQueueEvent.name} found`,\n                correlationId\n            );\n            this.addQueueMeasurement(\n                preQueueEvent.name,\n                correlationId,\n                undefined,\n                true\n            );\n        }\n        this.preQueueTimeByCorrelationId.set(correlationId, {\n            name: eventName,\n            time: window.performance.now(),\n        });\n    }\n\n    /**\n     * Calculates and adds queue time measurement for given performance event.\n     *\n     * @param {PerformanceEvents} eventName\n     * @param {?string} correlationId\n     * @param {?number} queueTime\n     * @param {?boolean} manuallyCompleted - indicator for manually completed queue measurements\n     * @returns\n     */\n    addQueueMeasurement(\n        eventName: string,\n        correlationId?: string,\n        queueTime?: number,\n        manuallyCompleted?: boolean\n    ): void {\n        if (!this.supportsBrowserPerformanceNow()) {\n            this.logger.trace(\n                `BrowserPerformanceClient: window performance API not available, unable to add queue measurement for ${eventName}`\n            );\n            return;\n        }\n\n        if (!correlationId) {\n            this.logger.trace(\n                `BrowserPerformanceClient: correlationId for ${eventName} not provided, unable to add queue measurement`\n            );\n            return;\n        }\n\n        const preQueueTime = super.getPreQueueTime(eventName, correlationId);\n        if (!preQueueTime) {\n            return;\n        }\n\n        const currentTime = window.performance.now();\n        const resQueueTime =\n            queueTime || super.calculateQueuedTime(preQueueTime, currentTime);\n\n        return super.addQueueMeasurement(\n            eventName,\n            correlationId,\n            resQueueTime,\n            manuallyCompleted\n        );\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}