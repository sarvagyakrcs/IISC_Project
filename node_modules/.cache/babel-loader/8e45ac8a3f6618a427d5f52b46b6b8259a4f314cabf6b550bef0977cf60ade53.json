{"ast":null,"code":"/*! @azure/msal-browser v3.6.0 2023-12-01 */\n'use strict';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * BridgeProxy\n * Provides a proxy for accessing a bridge to a host app and/or\n * platform broker\n */\nclass BridgeProxy {\n  /**\n   * initializeNestedAppAuthBridge - Initializes the bridge to the host app\n   * @returns a promise that resolves to an InitializeBridgeResponse or rejects with an Error\n   * @remarks This method will be called by the create factory method\n   * @remarks If the bridge is not available, this method will throw an error\n   */\n  static async initializeNestedAppAuthBridge() {\n    if (window === undefined) {\n      throw new Error(\"window is undefined\");\n    }\n    if (window.nestedAppAuthBridge === undefined) {\n      throw new Error(\"window.nestedAppAuthBridge is undefined\");\n    }\n    if (window.crypto === undefined) {\n      throw new Error(\"window.crypto is undefined\");\n    }\n    try {\n      BridgeProxy.crypto = window.crypto;\n      window.nestedAppAuthBridge.addEventListener(\"message\", response => {\n        const responsePayload = typeof response === \"string\" ? response : response.data;\n        const responseEnvelope = JSON.parse(responsePayload);\n        const request = BridgeProxy.bridgeRequests.find(element => element.requestId === responseEnvelope.requestId);\n        if (request !== undefined) {\n          BridgeProxy.bridgeRequests.splice(BridgeProxy.bridgeRequests.indexOf(request), 1);\n          if (responseEnvelope.success) {\n            request.resolve(responseEnvelope.body);\n          } else {\n            request.reject(responseEnvelope.body);\n          }\n        }\n      });\n      const promise = new Promise((resolve, reject) => {\n        const message = {\n          messageType: \"NestedAppAuthRequest\",\n          method: \"GetInitContext\",\n          requestId: BridgeProxy.getRandomId()\n        };\n        const request = {\n          requestId: message.requestId,\n          method: message.method,\n          resolve: resolve,\n          reject: reject\n        };\n        BridgeProxy.bridgeRequests.push(request);\n        window.nestedAppAuthBridge.postMessage(JSON.stringify(message));\n      });\n      return await promise;\n    } catch (error) {\n      window.console.log(error);\n      throw error;\n    }\n  }\n  static getRandomId() {\n    return BridgeProxy.crypto.randomUUID();\n  }\n  /**\n   * getTokenInteractive - Attempts to get a token interactively from the bridge\n   * @param request A token request\n   * @returns a promise that resolves to a token response or rejects with a BridgeError\n   */\n  getTokenInteractive(request) {\n    return this.sendRequest(\"GetTokenPopup\", request);\n  }\n  /**\n   * getTokenSilent Attempts to get a token silently from the bridge\n   * @param request A token request\n   * @returns a promise that resolves to a token response or rejects with a BridgeError\n   */\n  getTokenSilent(request) {\n    return this.sendRequest(\"GetToken\", request);\n  }\n  /**\n   * getAccountInfo - Gets account information from the bridge\n   *\n   * @param request A request for account information\n   */\n  getAccountInfo(request) {\n    let method = \"GetAccountByHomeId\";\n    if (request.homeAccountId !== undefined) {\n      method = \"GetAccountByHomeId\";\n    }\n    if (request.localAccountId !== undefined) {\n      method = \"GetAccountByLocalId\";\n    }\n    if (request.username !== undefined) {\n      method = \"GetAccountByUsername\";\n    }\n    return this.sendRequest(method, request);\n  }\n  getActiveAccount() {\n    return this.sendRequest(\"GetActiveAccount\", undefined);\n  }\n  getHostCapabilities() {\n    return this.capabilities ?? null;\n  }\n  /**\n   * A method used to send a request to the bridge\n   * @param request A token request\n   * @returns a promise that resolves to a response of provided type or rejects with a BridgeError\n   */\n  sendRequest(method, request) {\n    const message = {\n      messageType: \"NestedAppAuthRequest\",\n      method: method,\n      requestId: BridgeProxy.getRandomId(),\n      body: request\n    };\n    const promise = new Promise((resolve, reject) => {\n      const request = {\n        requestId: message.requestId,\n        method: message.method,\n        resolve: resolve,\n        reject: reject\n      };\n      BridgeProxy.bridgeRequests.push(request);\n      window.nestedAppAuthBridge.postMessage(JSON.stringify(message));\n    });\n    return promise;\n  }\n  /**\n   * Private constructor for BridgeProxy\n   * @param sdkName The name of the SDK being used to make requests on behalf of the app\n   * @param sdkVersion The version of the SDK being used to make requests on behalf of the app\n   * @param capabilities The capabilities of the bridge / SDK / platform broker\n   */\n  constructor(sdkName, sdkVersion, capabilities) {\n    this.sdkName = sdkName;\n    this.sdkVersion = sdkVersion;\n    this.capabilities = capabilities;\n  }\n  /**\n   * Factory method for creating an implementation of IBridgeProxy\n   * @returns A promise that resolves to a BridgeProxy implementation\n   */\n  static async create() {\n    const response = await BridgeProxy.initializeNestedAppAuthBridge();\n    return new BridgeProxy(response.sdkName, response.sdkVersion, response.capabilities);\n  }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nBridgeProxy.bridgeRequests = [];\nexport { BridgeProxy, BridgeProxy as default };","map":{"version":3,"names":["BridgeProxy","initializeNestedAppAuthBridge","window","undefined","Error","nestedAppAuthBridge","crypto","addEventListener","response","responsePayload","data","responseEnvelope","JSON","parse","request","bridgeRequests","find","element","requestId","splice","indexOf","success","resolve","body","reject","promise","Promise","message","messageType","method","getRandomId","push","postMessage","stringify","error","console","log","randomUUID","getTokenInteractive","sendRequest","getTokenSilent","getAccountInfo","homeAccountId","localAccountId","username","getActiveAccount","getHostCapabilities","capabilities","constructor","sdkName","sdkVersion","create"],"sources":["/Users/sarvagyakumar/Desktop/IISC_Project/node_modules/@azure/msal-browser/src/naa/BridgeProxy.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AccountInfo } from \"./AccountInfo\";\nimport {\n    AccountByHomeIdRequest,\n    AccountByLocalIdRequest,\n    AccountByUsernameRequest,\n} from \"./AccountRequests\";\nimport { AuthBridge, AuthBridgeResponse } from \"./AuthBridge\";\nimport { BridgeCapabilities } from \"./BridgeCapabilities\";\nimport { BridgeRequest } from \"./BridgeRequest\";\nimport { BridgeRequestEnvelope, BridgeMethods } from \"./BridgeRequestEnvelope\";\nimport { BridgeResponseEnvelope } from \"./BridgeResponseEnvelope\";\nimport { IBridgeProxy } from \"./IBridgeProxy\";\nimport { InitializeBridgeResponse } from \"./InitializeBridgeResponse\";\nimport { TokenRequest } from \"./TokenRequest\";\nimport { TokenResponse } from \"./TokenResponse\";\n\ndeclare global {\n    interface Window {\n        nestedAppAuthBridge: AuthBridge;\n    }\n}\n\n/**\n * BridgeProxy\n * Provides a proxy for accessing a bridge to a host app and/or\n * platform broker\n */\nexport class BridgeProxy implements IBridgeProxy {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static bridgeRequests: any[] = [];\n    static crypto: Crypto;\n    sdkName: string;\n    sdkVersion: string;\n    capabilities?: BridgeCapabilities;\n\n    /**\n     * initializeNestedAppAuthBridge - Initializes the bridge to the host app\n     * @returns a promise that resolves to an InitializeBridgeResponse or rejects with an Error\n     * @remarks This method will be called by the create factory method\n     * @remarks If the bridge is not available, this method will throw an error\n     */\n    protected static async initializeNestedAppAuthBridge(): Promise<InitializeBridgeResponse> {\n        if (window === undefined) {\n            throw new Error(\"window is undefined\");\n        }\n        if (window.nestedAppAuthBridge === undefined) {\n            throw new Error(\"window.nestedAppAuthBridge is undefined\");\n        }\n        if (window.crypto === undefined) {\n            throw new Error(\"window.crypto is undefined\");\n        }\n\n        try {\n            BridgeProxy.crypto = window.crypto;\n\n            window.nestedAppAuthBridge.addEventListener(\n                \"message\",\n                (response: AuthBridgeResponse) => {\n                    const responsePayload =\n                        typeof response === \"string\" ? response : response.data;\n                    const responseEnvelope: BridgeResponseEnvelope =\n                        JSON.parse(responsePayload);\n                    const request = BridgeProxy.bridgeRequests.find(\n                        (element) =>\n                            element.requestId === responseEnvelope.requestId\n                    );\n                    if (request !== undefined) {\n                        BridgeProxy.bridgeRequests.splice(\n                            BridgeProxy.bridgeRequests.indexOf(request),\n                            1\n                        );\n                        if (responseEnvelope.success) {\n                            request.resolve(responseEnvelope.body);\n                        } else {\n                            request.reject(responseEnvelope.body);\n                        }\n                    }\n                }\n            );\n\n            const promise = new Promise<InitializeBridgeResponse>(\n                (resolve, reject) => {\n                    const message: BridgeRequestEnvelope = {\n                        messageType: \"NestedAppAuthRequest\",\n                        method: \"GetInitContext\",\n                        requestId: BridgeProxy.getRandomId(),\n                    };\n                    const request: BridgeRequest<InitializeBridgeResponse> = {\n                        requestId: message.requestId,\n                        method: message.method,\n                        resolve: resolve,\n                        reject: reject,\n                    };\n                    BridgeProxy.bridgeRequests.push(request);\n                    window.nestedAppAuthBridge.postMessage(\n                        JSON.stringify(message)\n                    );\n                }\n            );\n\n            return await promise;\n        } catch (error) {\n            window.console.log(error);\n            throw error;\n        }\n    }\n\n    public static getRandomId(): string {\n        return BridgeProxy.crypto.randomUUID();\n    }\n\n    /**\n     * getTokenInteractive - Attempts to get a token interactively from the bridge\n     * @param request A token request\n     * @returns a promise that resolves to a token response or rejects with a BridgeError\n     */\n    public getTokenInteractive(request: TokenRequest): Promise<TokenResponse> {\n        return this.sendRequest<TokenResponse>(\"GetTokenPopup\", request);\n    }\n\n    /**\n     * getTokenSilent Attempts to get a token silently from the bridge\n     * @param request A token request\n     * @returns a promise that resolves to a token response or rejects with a BridgeError\n     */\n    public getTokenSilent(request: TokenRequest): Promise<TokenResponse> {\n        return this.sendRequest<TokenResponse>(\"GetToken\", request);\n    }\n\n    /**\n     * getAccountInfo - Gets account information from the bridge\n     *\n     * @param request A request for account information\n     */\n    public getAccountInfo(\n        request:\n            | AccountByHomeIdRequest\n            | AccountByLocalIdRequest\n            | AccountByUsernameRequest\n    ): Promise<AccountInfo> {\n        let method: BridgeMethods = \"GetAccountByHomeId\";\n\n        if ((request as AccountByHomeIdRequest).homeAccountId !== undefined) {\n            method = \"GetAccountByHomeId\";\n        }\n\n        if ((request as AccountByLocalIdRequest).localAccountId !== undefined) {\n            method = \"GetAccountByLocalId\";\n        }\n\n        if ((request as AccountByUsernameRequest).username !== undefined) {\n            method = \"GetAccountByUsername\";\n        }\n\n        return this.sendRequest<AccountInfo>(method, request);\n    }\n\n    public getActiveAccount(): Promise<AccountInfo> {\n        return this.sendRequest<AccountInfo>(\"GetActiveAccount\", undefined);\n    }\n\n    public getHostCapabilities(): BridgeCapabilities | null {\n        return this.capabilities ?? null;\n    }\n\n    /**\n     * A method used to send a request to the bridge\n     * @param request A token request\n     * @returns a promise that resolves to a response of provided type or rejects with a BridgeError\n     */\n    private sendRequest<TResponse>(\n        method: BridgeMethods,\n        request:\n            | TokenRequest\n            | AccountByHomeIdRequest\n            | AccountByLocalIdRequest\n            | AccountByUsernameRequest\n            | undefined\n    ): Promise<TResponse> {\n        const message: BridgeRequestEnvelope = {\n            messageType: \"NestedAppAuthRequest\",\n            method: method,\n            requestId: BridgeProxy.getRandomId(),\n            body: request,\n        };\n\n        const promise = new Promise<TResponse>((resolve, reject) => {\n            const request: BridgeRequest<TResponse> = {\n                requestId: message.requestId,\n                method: message.method,\n                resolve: resolve,\n                reject: reject,\n            };\n            BridgeProxy.bridgeRequests.push(request);\n            window.nestedAppAuthBridge.postMessage(JSON.stringify(message));\n        });\n\n        return promise;\n    }\n\n    /**\n     * Private constructor for BridgeProxy\n     * @param sdkName The name of the SDK being used to make requests on behalf of the app\n     * @param sdkVersion The version of the SDK being used to make requests on behalf of the app\n     * @param capabilities The capabilities of the bridge / SDK / platform broker\n     */\n    private constructor(\n        sdkName: string,\n        sdkVersion: string,\n        capabilities?: BridgeCapabilities\n    ) {\n        this.sdkName = sdkName;\n        this.sdkVersion = sdkVersion;\n        this.capabilities = capabilities;\n    }\n\n    /**\n     * Factory method for creating an implementation of IBridgeProxy\n     * @returns A promise that resolves to a BridgeProxy implementation\n     */\n    public static async create(): Promise<IBridgeProxy> {\n        const response = await BridgeProxy.initializeNestedAppAuthBridge();\n        return new BridgeProxy(\n            response.sdkName,\n            response.sdkVersion,\n            response.capabilities\n        );\n    }\n}\n\nexport default BridgeProxy;\n"],"mappings":";;;AAAA;;;AAGG;AAwBH;;;;AAIG;MACUA,WAAW;EAQpB;;;;;AAKG;EACO,aAAaC,6BAA6BA,CAAA;IAChD,IAAIC,MAAM,KAAKC,SAAS,EAAE;MACtB,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;IACzC;IACD,IAAIF,MAAM,CAACG,mBAAmB,KAAKF,SAAS,EAAE;MAC1C,MAAM,IAAIC,KAAK,CAAC,yCAAyC,CAAC;IAC7D;IACD,IAAIF,MAAM,CAACI,MAAM,KAAKH,SAAS,EAAE;MAC7B,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;IAChD;IAED,IAAI;MACAJ,WAAW,CAACM,MAAM,GAAGJ,MAAM,CAACI,MAAM;MAElCJ,MAAM,CAACG,mBAAmB,CAACE,gBAAgB,CACvC,SAAS,EACRC,QAA4B,IAAI;QAC7B,MAAMC,eAAe,GACjB,OAAOD,QAAQ,KAAK,QAAQ,GAAGA,QAAQ,GAAGA,QAAQ,CAACE,IAAI;QAC3D,MAAMC,gBAAgB,GAClBC,IAAI,CAACC,KAAK,CAACJ,eAAe,CAAC;QAC/B,MAAMK,OAAO,GAAGd,WAAW,CAACe,cAAc,CAACC,IAAI,CAC1CC,OAAO,IACJA,OAAO,CAACC,SAAS,KAAKP,gBAAgB,CAACO,SAAS,CACvD;QACD,IAAIJ,OAAO,KAAKX,SAAS,EAAE;UACvBH,WAAW,CAACe,cAAc,CAACI,MAAM,CAC7BnB,WAAW,CAACe,cAAc,CAACK,OAAO,CAACN,OAAO,CAAC,EAC3C,CAAC,CACJ;UACD,IAAIH,gBAAgB,CAACU,OAAO,EAAE;YAC1BP,OAAO,CAACQ,OAAO,CAACX,gBAAgB,CAACY,IAAI,CAAC;UACzC,OAAM;YACHT,OAAO,CAACU,MAAM,CAACb,gBAAgB,CAACY,IAAI,CAAC;UACxC;QACJ;MACL,CAAC,CACJ;MAED,MAAME,OAAO,GAAG,IAAIC,OAAO,CACvB,CAACJ,OAAO,EAAEE,MAAM,KAAI;QAChB,MAAMG,OAAO,GAA0B;UACnCC,WAAW,EAAE,sBAAsB;UACnCC,MAAM,EAAE,gBAAgB;UACxBX,SAAS,EAAElB,WAAW,CAAC8B,WAAW;SACrC;QACD,MAAMhB,OAAO,GAA4C;UACrDI,SAAS,EAAES,OAAO,CAACT,SAAS;UAC5BW,MAAM,EAAEF,OAAO,CAACE,MAAM;UACtBP,OAAO,EAAEA,OAAO;UAChBE,MAAM,EAAEA;SACX;QACDxB,WAAW,CAACe,cAAc,CAACgB,IAAI,CAACjB,OAAO,CAAC;QACxCZ,MAAM,CAACG,mBAAmB,CAAC2B,WAAW,CAClCpB,IAAI,CAACqB,SAAS,CAACN,OAAO,CAAC,CAC1B;MACL,CAAC,CACJ;MAED,OAAO,MAAMF,OAAO;IACvB,EAAC,OAAOS,KAAK,EAAE;MACZhC,MAAM,CAACiC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MACzB,MAAMA,KAAK;IACd;;EAGE,OAAOJ,WAAWA,CAAA;IACrB,OAAO9B,WAAW,CAACM,MAAM,CAAC+B,UAAU,EAAE;;EAG1C;;;;AAIG;EACIC,mBAAmBA,CAACxB,OAAqB;IAC5C,OAAO,IAAI,CAACyB,WAAW,CAAgB,eAAe,EAAEzB,OAAO,CAAC;;EAGpE;;;;AAIG;EACI0B,cAAcA,CAAC1B,OAAqB;IACvC,OAAO,IAAI,CAACyB,WAAW,CAAgB,UAAU,EAAEzB,OAAO,CAAC;;EAG/D;;;;AAIG;EACI2B,cAAcA,CACjB3B,OAG8B;IAE9B,IAAIe,MAAM,GAAkB,oBAAoB;IAEhD,IAAKf,OAAkC,CAAC4B,aAAa,KAAKvC,SAAS,EAAE;MACjE0B,MAAM,GAAG,oBAAoB;IAChC;IAED,IAAKf,OAAmC,CAAC6B,cAAc,KAAKxC,SAAS,EAAE;MACnE0B,MAAM,GAAG,qBAAqB;IACjC;IAED,IAAKf,OAAoC,CAAC8B,QAAQ,KAAKzC,SAAS,EAAE;MAC9D0B,MAAM,GAAG,sBAAsB;IAClC;IAED,OAAO,IAAI,CAACU,WAAW,CAAcV,MAAM,EAAEf,OAAO,CAAC;;EAGlD+B,gBAAgBA,CAAA;IACnB,OAAO,IAAI,CAACN,WAAW,CAAc,kBAAkB,EAAEpC,SAAS,CAAC;;EAGhE2C,mBAAmBA,CAAA;IACtB,OAAO,IAAI,CAACC,YAAY,IAAI,IAAI;;EAGpC;;;;AAIG;EACKR,WAAWA,CACfV,MAAqB,EACrBf,OAKe;IAEf,MAAMa,OAAO,GAA0B;MACnCC,WAAW,EAAE,sBAAsB;MACnCC,MAAM,EAAEA,MAAM;MACdX,SAAS,EAAElB,WAAW,CAAC8B,WAAW,EAAE;MACpCP,IAAI,EAAET;KACT;IAED,MAAMW,OAAO,GAAG,IAAIC,OAAO,CAAY,CAACJ,OAAO,EAAEE,MAAM,KAAI;MACvD,MAAMV,OAAO,GAA6B;QACtCI,SAAS,EAAES,OAAO,CAACT,SAAS;QAC5BW,MAAM,EAAEF,OAAO,CAACE,MAAM;QACtBP,OAAO,EAAEA,OAAO;QAChBE,MAAM,EAAEA;OACX;MACDxB,WAAW,CAACe,cAAc,CAACgB,IAAI,CAACjB,OAAO,CAAC;MACxCZ,MAAM,CAACG,mBAAmB,CAAC2B,WAAW,CAACpB,IAAI,CAACqB,SAAS,CAACN,OAAO,CAAC,CAAC;IACnE,CAAC,CAAC;IAEF,OAAOF,OAAO;;EAGlB;;;;;AAKG;EACHuB,YACIC,OAAe,EACfC,UAAkB,EAClBH,YAAiC;IAEjC,IAAI,CAACE,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACH,YAAY,GAAGA,YAAY;;EAGpC;;;AAGG;EACI,aAAaI,MAAMA,CAAA;IACtB,MAAM3C,QAAQ,GAAG,MAAMR,WAAW,CAACC,6BAA6B,EAAE;IAClE,OAAO,IAAID,WAAW,CAClBQ,QAAQ,CAACyC,OAAO,EAChBzC,QAAQ,CAAC0C,UAAU,EACnB1C,QAAQ,CAACuC,YAAY,CACxB;;;AAtML;AACO/C,WAAc,CAAAe,cAAA,GAAU,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}